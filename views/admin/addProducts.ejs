<%- include('../layouts/adminHeader.ejs') %>

<form action="/admin/addProducts" method="post" enctype="multipart/form-data" id="product-form" onsubmit="return validateForm()">



    <section class="content-main">
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                    <div>
                     <input type="submit" class="btn btn-md rounded font-sm hover-up" value="Upload ">
                    </div>
                </div>
            </div>
            <div class="col-lg-9">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="mb-4">
                            <label for="product_title" class="form-label">Product title</label>
                            <input type="text" placeholder="Type here..." name="productName" class="form-control"
                                id="product_title">
                                
                            <div class="error-message" style="color: red;" id="product_title-error"></div>

                        </div>
                        
                            <div class="col-md-6  mb-3">
                                <label for="inputPassword4" class="form-label">category</label>
                                <select name="productCategory" class="form-control" id="product_category">
                                    <option value="" disabled selected>Select a Category
                                    </option>
                                    <% category.forEach(category=> { 
                                        if (category.is_Listed) {%>
                                        <option value="<%= category._id %>">
                                              <%= category.categoryName %>
                                        </option><%}
                                     }); %>
                                    </select>
                            <div class="error-message" style="color: red;" id="product_category-error"></div>
                            </div>
                            </div>
                            </div>
                            </div> 
        <div class="card mb-4">
            <div class="card-body">
                <div class="row gx-3">
                    <div class="col-md-4">
                        <label for="inputPrice" class="form-label">Price</label>
                        <input type="text" class="form-control" name="price" placeholder="Type here..." id="product_price">
                        <div class="error-message" style="color: red;" id="product_price-error"></div>
                    </div>
                    <div class="col-md-4">
                        <label for="discount_price">Discount Price:</label>
                        <input type="text" name="discount_price" placeholder="Type here..." class="form-control" id="discount_price">
                        <div class="error-message" style="color: red;" id="discount_price-error"></div>
                    </div>
                </div>
            </div>
        </div>
        
             
                                                
        <div class="col-md-4">
            <label for="inputPrice" class="form-label">Size and Quantity</label>
            <div class="size-container" id="size-container">
                <div class="error-message" style="color: red;" id="sizes-error"></div>
        
               
                <div class="row my-1">
                    <div class="col-4">
                        <label for="size-s">Size (S):</label>
                        <input type="number" name="S" placeholder="Quantity" class="form-control" id="size-s">
                        <div class="error-message" style="color: red;" id="size-s-error"></div>
                    </div>
                    <div class="col-4">
                        <label for="size-m">Size (M):</label>
                        <input type="number" name="M" placeholder="Quantity" class="form-control" id="size-m">
                        <div class="error-message" style="color: red;" id="size-m-error"></div>
                    </div>
                    <div class="col-4">
                        <label for="size-l">Size (L):</label>
                        <input type="number" name="L" placeholder="Quantity" class="form-control" id="size-l">
                        <div class="error-message" style="color: red;" id="size-l-error"></div>
                    </div>
                </div>
            </div>
        </div>
        <div>
                            <label class="form-label">Description</label>
                            <textarea placeholder="Type here..." name="description" class="form-control"
                                rows="4" id="description"></textarea>
                            <div class="error-message" style="color: red;" id="description-error"></div>

                        </div>
                        <div>
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here..." name="fullDescription" class="form-control"
                                rows="4" id="fullDescription"></textarea>
                            <div class="error-message" style="color: red;" id="fullDescription-error"></div>

                        </div>
                    </div>
                    </div>


                </div> 

            </div>
     </div>
 </div>
</div>
           

            <div class="col-lg-3">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Picture</h4>
                            </div>
                            <div class="card-body">
                                
                                <div class="card mb-4">
                                    <div class="card-body">
                                        
                                        <div class="images-container">
                                            <div class="image-preview-container d-flex flex-wrap justify-content-center">
                                                <!-- Placeholder for default image -->
                                                <div class="image-container border-1">
                                                    <img style="width: 100px; height: 100px; margin-bottom: 20px;" src="/uploads.svg" alt="Default" class="image-preview">
                                                </div>
                                            </div>
                                            <input class="form-control" name="image"  multiple="multiple" type="file" onchange="displayImages(this)">
                                            <div class="error-message" style="color: red;" id="product_image-error"></div>
                                        </div>
                                        
                                        
                                    </div>
                                </div>
                            </div>
                        </div> 
                  
                    </div>











            <div id="invalid">
                <% if (typeof message !=='undefined' && message) { %>
                    <p style="color: rgb(8, 96, 0);" id="message">
                        <%= message %>
                    </p>
                    <% } %>
                    
            </div>
        </div>
        </div>

        </div>
    </section>
</form>

<script>
    function validateForm() {
        var productName = document.getElementById("product_title").value;
        var productCategory = document.getElementById("product_category").value;
        var productPrice = parseFloat(document.getElementById("product_price").value);
        var discountPrice = parseFloat(document.getElementById("discount_price").value);
        var sizeS = parseInt(document.getElementById("size-s").value);
        var sizeM = parseInt(document.getElementById("size-m").value);
        var sizeL = parseInt(document.getElementById("size-l").value);
        var description = document.getElementById("description").value;
        var fullDescription = document.getElementById("fullDescription").value;

        var errors = [];

        if (productName.trim() === "") {
            errors.push("Product title is required.");
            document.getElementById("product_title-error").textContent = "Product title is required.";
        } else {
            document.getElementById("product_title-error").textContent = "";
        }

        if (productCategory.trim() === "") {
            errors.push("Category is required.");
            document.getElementById("product_category-error").textContent = "Category is required.";
        } else {
            document.getElementById("product_category-error").textContent = "";
        }

        if (isNaN(productPrice) || productPrice <= 0) {
            errors.push("Price must be a valid positive number greater than 0.");
            document.getElementById("product_price-error").textContent = "Price must be a valid positive number greater than 0.";
        } else {
            document.getElementById("product_price-error").textContent = "";
        }

        if (isNaN(discountPrice) || discountPrice < 0 || discountPrice >= productPrice) {
            errors.push("Discount Price must be a valid number greater than or equal to 0 and less than Price.");
            document.getElementById("discount_price-error").textContent = "Discount Price must be a valid number greater than or equal to 0 and less than Price.";
        } else {
            document.getElementById("discount_price-error").textContent = "";
        }

        if (isNaN(sizeS) || isNaN(sizeM) || isNaN(sizeL) || sizeS < 0 || sizeM < 0 || sizeL < 0) {
            errors.push("Size and Quantity must be valid positive numbers.");
            document.getElementById("sizes-error").textContent = "Size and Quantity must be valid positive numbers.";
        } else {
            document.getElementById("sizes-error").textContent = "";
        }

        if (description.trim() === "") {
            errors.push("Description is required.");
            document.getElementById("description-error").textContent = "Description is required.";
        } else {
            document.getElementById("description-error").textContent = "";
        }

        if (fullDescription.trim() === "") {
            errors.push("Full Description is required.");
            document.getElementById("fullDescription-error").textContent = "Full Description is required.";
        } else {
            document.getElementById("fullDescription-error").textContent = "";
        }

        if (errors.length > 0) {
            alert(errors.join("\n"));
            return false;
        }

        return true;
    }

    // Function to clear error messages when the user starts typing
    function clearError(elementId) {
        document.getElementById(elementId + "-error").textContent = "";
    }

    // Event listeners for input fields to clear errors
    document.getElementById("product_title").addEventListener("input", function() {
        clearError("product_title");
    });
    document.getElementById("product_category").addEventListener("input", function() {
        clearError("product_category");
    });
    document.getElementById("product_price").addEventListener("input", function() {
        clearError("product_price");
    });
    document.getElementById("discount_price").addEventListener("input", function() {
        clearError("discount_price");
    });
    document.getElementById("size-s").addEventListener("input", function() {
        clearError("sizes");
    });
    document.getElementById("size-m").addEventListener("input", function() {
        clearError("sizes");
    });
    document.getElementById("size-l").addEventListener("input", function() {
        clearError("sizes");
    });
    document.getElementById("description").addEventListener("input", function() {
        clearError("description");
    });
    document.getElementById("fullDescription").addEventListener("input", function() {
        clearError("fullDescription");
    });
</script>












<script>
    function displayImages(input) {
        const previewContainer = document.querySelector('.image-preview-container');

        // Clear previous previews only if new files are selected
        if (input.files && input.files.length > 0) {
            previewContainer.innerHTML = ''; // Clear previous previews
        }

        // Function to create image preview with delete button
        function createImagePreview(imageSrc) {
            const imagePreview = document.createElement('div');
            imagePreview.classList.add('image-container');

            const img = document.createElement('img');
            img.src = imageSrc;
            img.style.width = '100px';
            img.style.height = '100px';
            img.style.marginBottom = '20px';
            img.style.marginRight = '5px';
            img.style.marginLeft = '5px';
            img.classList.add('image-preview');
            imagePreview.appendChild(img);

            // Create delete button
            const deleteButton = document.createElement('button');
            deleteButton.textContent = 'Delete';
            deleteButton.classList.add('delete-button');
            deleteButton.onclick = function () {
                imagePreview.remove(); // Remove the image preview when delete button is clicked
            };
            imagePreview.appendChild(deleteButton);

            return imagePreview;
        }

        // Show existing images
        const existingImages = document.querySelectorAll('.existing-image');
        existingImages.forEach(function(existingImage) {
            const imageSrc = existingImage.getAttribute('src');
            previewContainer.appendChild(createImagePreview(imageSrc));
        });

        // Show newly added images
        if (input.files && input.files.length > 0) {
            for (let i = 0; i < input.files.length; i++) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    previewContainer.appendChild(createImagePreview(e.target.result));
                };
                reader.readAsDataURL(input.files[i]);
            }
        }
    }
</script>




<%- include('../layouts/adminFooter.ejs') %>